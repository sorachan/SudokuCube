/*
 * Copyright (C) 2017 Sora Steenvoort
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package de.rub.sudokucube;

import java.awt.CardLayout;
import java.awt.Component;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.PrintStream;
import java.util.Locale;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import javax.swing.WindowConstants;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Sora Steenvoort
 */
public class SudokuMainWindow extends javax.swing.JFrame implements PropertyChangeListener {

    Sudoku puz = null, sln = null;
    SudokuGenerator sudGen = null;
    WindowListener wl = null;
    boolean allSetup = false;
    private Class puzCls;
    final String[] sudCls = new String[]{
        "de.rub.sudokucube.Sudoku3DSimple",
        "de.rub.sudokucube.Sudoku3DHyper",
        "de.rub.sudokucube.StandardSudoku"
    };
    int[] aset = new int[]{0, 0};
    static final String VERSION = "v1.1";
    static final String PROGRAM_NAME = "SudokuCube " + VERSION;

    static final boolean DEBUG = false;
    static long t1, t2, t3;

    /**
     * Creates new form SudokuMainWindow
     */
    public SudokuMainWindow() {
        addPropertyChangeListener(this);
        final Component This = this;
        try {
            puzCls = Class.forName(sudCls[0]);
        } catch (Exception e) {
            System.err.println(e);
        }
        wl = new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                int quit = JOptionPane.showConfirmDialog(This, java.util.ResourceBundle.getBundle("de/rub/sudokucube/Bundle").getString("Sure") + "\n" + java.util.ResourceBundle.getBundle("de/rub/sudokucube/Bundle").getString("AnyUnsaved"), "", JOptionPane.YES_NO_OPTION);
                if (quit == JOptionPane.YES_OPTION) {
                    dispose();
                }
            }
        };
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        superPanel = new javax.swing.JPanel();
        menuPanel = new javax.swing.JPanel();
        newBtn = new javax.swing.JButton();
        loadBtn = new javax.swing.JButton();
        quitMainBtn = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jProgressBar1.setVisible(false);
        optionsBtn = new javax.swing.JButton();
        helpBtn = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        saveBtn = new javax.swing.JButton();
        printBtn = new javax.swing.JButton();
        hintBtn = new javax.swing.JButton();
        checkBtn = new javax.swing.JButton();
        slnBtn = new javax.swing.JButton();
        quitBtn = new javax.swing.JButton();
        drawPanel1 = new de.rub.sudokucube.DrawPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(PROGRAM_NAME);

        superPanel.setLayout(new java.awt.CardLayout());

        newBtn.setMnemonic('n');
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/rub/sudokucube/Bundle"); // NOI18N
        newBtn.setText(bundle.getString("N_NEW")); // NOI18N
        newBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBtnActionPerformed(evt);
            }
        });

        loadBtn.setMnemonic('l');
        loadBtn.setText(bundle.getString("L_LOAD")); // NOI18N
        loadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadBtnActionPerformed(evt);
            }
        });

        quitMainBtn.setMnemonic('q');
        quitMainBtn.setText(bundle.getString("Q_QUIT")); // NOI18N
        quitMainBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMainBtnActionPerformed(evt);
            }
        });

        jProgressBar1.setMaximum(500);
        jProgressBar1.setString(bundle.getString("GENERATING SUDOKU...")); // NOI18N
        jProgressBar1.setStringPainted(true);

        optionsBtn.setMnemonic('o');
        optionsBtn.setText(bundle.getString("O_OPTIONS")); // NOI18N
        optionsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionsBtnActionPerformed(evt);
            }
        });

        helpBtn.setMnemonic('h');
        helpBtn.setText(bundle.getString("H_HELP")); // NOI18N

        javax.swing.GroupLayout menuPanelLayout = new javax.swing.GroupLayout(menuPanel);
        menuPanel.setLayout(menuPanelLayout);
        menuPanelLayout.setHorizontalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
                    .addComponent(newBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(loadBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(quitMainBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(optionsBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(helpBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        menuPanelLayout.setVerticalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(newBtn)
                .addGap(18, 18, 18)
                .addComponent(loadBtn)
                .addGap(18, 18, 18)
                .addComponent(optionsBtn)
                .addGap(18, 18, 18)
                .addComponent(helpBtn)
                .addGap(18, 18, 18)
                .addComponent(quitMainBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 139, Short.MAX_VALUE)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        superPanel.add(menuPanel, "menuCard");

        saveBtn.setMnemonic('f');
        saveBtn.setText(bundle.getString("F_SAVE TO FILE")); // NOI18N
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        printBtn.setMnemonic('p');
        printBtn.setText(bundle.getString("P_PRINT")); // NOI18N
        printBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printBtnActionPerformed(evt);
            }
        });

        hintBtn.setMnemonic('h');
        hintBtn.setText(bundle.getString("H_TOGGLE HINTS")); // NOI18N
        hintBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hintBtnActionPerformed(evt);
            }
        });

        checkBtn.setMnemonic('c');
        checkBtn.setText(bundle.getString("C_CHECK")); // NOI18N
        checkBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBtnActionPerformed(evt);
            }
        });

        slnBtn.setMnemonic('s');
        slnBtn.setText(bundle.getString("S_SOLUTION")); // NOI18N
        slnBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                slnBtnActionPerformed(evt);
            }
        });

        quitBtn.setMnemonic('q');
        quitBtn.setText(bundle.getString("Q_QUIT")); // NOI18N
        quitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout drawPanel1Layout = new javax.swing.GroupLayout(drawPanel1);
        drawPanel1.setLayout(drawPanel1Layout);
        drawPanel1Layout.setHorizontalGroup(
            drawPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        drawPanel1Layout.setVerticalGroup(
            drawPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 302, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(drawPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hintBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                            .addComponent(checkBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(printBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(slnBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(saveBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                            .addComponent(quitBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drawPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(printBtn)
                        .addGap(18, 18, 18)
                        .addComponent(slnBtn))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(hintBtn)
                        .addGap(18, 18, 18)
                        .addComponent(checkBtn))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(saveBtn)
                        .addGap(18, 18, 18)
                        .addComponent(quitBtn)))
                .addContainerGap())
        );

        superPanel.add(mainPanel, "mainCard");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(superPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(superPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void propertyChange(PropertyChangeEvent pce) {
        if (pce.getPropertyName().equals("locale")) {
            Locale newLocale = (Locale) pce.getNewValue();
            Locale.setDefault(newLocale);
            JOptionPane.setDefaultLocale(newLocale);
            java.util.ResourceBundle.clearCache();
            java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/rub/sudokucube/Bundle"); // NOI18N
            newBtn.setText(bundle.getString("N_NEW")); // NOI18N
            loadBtn.setText(bundle.getString("L_LOAD")); // NOI18N
            quitMainBtn.setText(bundle.getString("Q_QUIT")); // NOI18N
            jProgressBar1.setString(bundle.getString("GENERATING SUDOKU...")); // NOI18N
            optionsBtn.setText(bundle.getString("O_OPTIONS")); // NOI18N
            helpBtn.setText(bundle.getString("H_HELP")); // NOI18N
            saveBtn.setText(bundle.getString("F_SAVE TO FILE")); // NOI18N
            printBtn.setText(bundle.getString("P_PRINT")); // NOI18N
            hintBtn.setText(bundle.getString("H_TOGGLE HINTS")); // NOI18N
            checkBtn.setText(bundle.getString("C_CHECK")); // NOI18N
            slnBtn.setText(bundle.getString("S_SOLUTION")); // NOI18N
            quitBtn.setText(bundle.getString("Q_QUIT")); // NOI18N
        }
    }

    class SudokuGenerator extends SwingWorker<Sudoku, Object> {

        @Override
        public Sudoku doInBackground() {
            if (DEBUG) {
                t1 = System.currentTimeMillis();
            }
            try {
                sln = Sudoku.randomPuzzle(puzCls.getCanonicalName());
            } catch (Exception e) {
                System.err.println(e);
            }
            if (DEBUG) {
                t2 = System.currentTimeMillis();
                System.err.println((t2 - t1) / 1000.0 + " seconds needed for randomPuzzle()");
            }
            try {
                puz = SudokuToolkit.randomPuzzleFromSolution(sln);
            } catch (Exception e) {
                System.err.println(e);
            }
            if (DEBUG) {
                t3 = System.currentTimeMillis();
                System.err.println((t3 - t2) / 1000.0 + " seconds needed for randomPuzzleFromSolution()");
            }
            while (!allSetup) {
                try {
                    Thread.sleep(10);
                } catch (Exception e) {
                }
            }
            return null;
        }

        @Override
        protected void done() {
            if (!isCancelled()) {
                drawPanel1.setup(puz, true);
                switchToGameView();
                jProgressBar1.setVisible(false);
                sudGen = null;
            }
        }
    }

    int timeForTimer = 0;
    private Timer timer = new Timer(10, new ActionListener() {
        private int counter = 0;
        private int tct;

        @Override
        public void actionPerformed(ActionEvent ae) {
            tct = (++counter) * 5000 / timeForTimer;
            jProgressBar1.setValue(tct);
            if (tct >= 500) {
                allSetup = true;
                counter = 0;
                timer.stop();
            }
        }
    });

    private void newBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBtnActionPerformed
        try {
            Sudoku s = (Sudoku) puzCls.newInstance();
            timeForTimer = s.TIME();
        } catch (InstantiationException | IllegalAccessException e) {
            System.err.println(e);
            timeForTimer = 5000;
        }
        allSetup = false;
        jProgressBar1.setValue(0);
        jProgressBar1.setVisible(true);
        timer.start();
        sudGen = new SudokuGenerator();
        sudGen.execute();
    }//GEN-LAST:event_newBtnActionPerformed

    private void switchToGameView() {
        this.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        this.addWindowListener(wl);
        CardLayout cl = (CardLayout) (superPanel.getLayout());
        cl.next(superPanel);
    }

    private void switchFromGameView() {
        this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        this.removeWindowListener(wl);
        CardLayout cl = (CardLayout) (superPanel.getLayout());
        cl.previous(superPanel);
        puz = null;
        sln = null;
    }

    private void loadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBtnActionPerformed
        try {
            JFileChooser fc = new JFileChooser();
            fc.setFileFilter(new FileNameExtensionFilter(java.util.ResourceBundle.getBundle("de/rub/sudokucube/Bundle").getString("SUDOKU SAVE FILES (*.SUD)"), "sud"));
            int state = fc.showOpenDialog(null);
            if (state == JFileChooser.APPROVE_OPTION) {
                File iFile = fc.getSelectedFile();
                InputStream is = new FileInputStream(iFile);
                puz = Sudoku.fromXML(is);
                for (Sudoku Sln : SudokuToolkit.solve(puz.sanitize())) {
                    sln = Sln;
                    break;
                }
                drawPanel1.setup(puz, true);
                switchToGameView();
            } else {

            }
        } catch (Exception e) {

        }
    }//GEN-LAST:event_loadBtnActionPerformed

    private void quitMainBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMainBtnActionPerformed
        if (sudGen != null) {
            sudGen.cancel(true);
        }
        dispose();
        System.exit(0);
    }//GEN-LAST:event_quitMainBtnActionPerformed

    private void quitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitBtnActionPerformed
        int quit = JOptionPane.showConfirmDialog(this, java.util.ResourceBundle.getBundle("de/rub/sudokucube/Bundle").getString("Sure") + "\n" + java.util.ResourceBundle.getBundle("de/rub/sudokucube/Bundle").getString("AnyUnsaved"), "", JOptionPane.YES_NO_OPTION);
        if (quit == JOptionPane.YES_OPTION) {
            switchFromGameView();
        }
    }//GEN-LAST:event_quitBtnActionPerformed

    private void printBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printBtnActionPerformed
        PrintDialog pDialog = new PrintDialog(this, true);
        if (pDialog.printersFound()) {
            pDialog.setSudokuContext(puz, sln);
            pDialog.setVisible(true);
        }
    }//GEN-LAST:event_printBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        try {
            JFileChooser fc = new JFileChooser();
            fc.setFileFilter(new FileNameExtensionFilter(java.util.ResourceBundle.getBundle("de/rub/sudokucube/Bundle").getString("SUDOKU SAVE FILES (*.SUD)"), "sud"));
            int state = fc.showSaveDialog(null);
            if (state == JFileChooser.APPROVE_OPTION) {
                String filename = fc.getSelectedFile().toString();
                if (!filename.endsWith(".sud")) {
                    filename += ".sud";
                }
                File oFile = new File(filename);
                FileOutputStream oStream = new FileOutputStream(oFile);
                PrintStream pStream = new PrintStream(oStream);
                puz.toXML(pStream);
            } else {

            }
        } catch (HeadlessException | FileNotFoundException e) {

        }
    }//GEN-LAST:event_saveBtnActionPerformed

    private void slnBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_slnBtnActionPerformed
        SlnDialog sDialog = new SlnDialog(this, true);
        sDialog.getDrawPanel().setup(sln, false);
        sDialog.setVisible(true);
    }//GEN-LAST:event_slnBtnActionPerformed

    private void hintBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hintBtnActionPerformed
        drawPanel1.toggleHints();
    }//GEN-LAST:event_hintBtnActionPerformed

    private void checkBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBtnActionPerformed
        drawPanel1.verify(sln);
    }//GEN-LAST:event_checkBtnActionPerformed

    private void optionsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsBtnActionPerformed
        aset = new OptionsDialog(this, true).showDialog(aset);
        try {
            puzCls = Class.forName(sudCls[aset[0]]);
        } catch (Exception e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_optionsBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SudokuMainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new SudokuMainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton checkBtn;
    private de.rub.sudokucube.DrawPanel drawPanel1;
    private javax.swing.JButton helpBtn;
    private javax.swing.JButton hintBtn;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JButton loadBtn;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel menuPanel;
    private javax.swing.JButton newBtn;
    private javax.swing.JButton optionsBtn;
    private javax.swing.JButton printBtn;
    private javax.swing.JButton quitBtn;
    private javax.swing.JButton quitMainBtn;
    private javax.swing.JButton saveBtn;
    private javax.swing.JButton slnBtn;
    private javax.swing.JPanel superPanel;
    // End of variables declaration//GEN-END:variables
}
