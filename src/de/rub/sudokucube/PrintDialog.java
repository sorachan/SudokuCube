/*
 * Copyright (C) 2017 Sora Steenvoort
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package de.rub.sudokucube;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import javax.print.Doc;
import javax.print.DocFlavor;
import javax.print.DocPrintJob;
import javax.print.PrintException;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.print.SimpleDoc;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.standard.Copies;
import javax.print.attribute.standard.MediaSizeName;
import javax.swing.JOptionPane;

/**
 *
 * @author Sora Steenvoort
 */
public class PrintDialog extends javax.swing.JDialog {

    Sudoku puz = null, sln = null;
    boolean printersFound;
    boolean pngReq;

    public void setSudokuContext(Sudoku Puz, Sudoku Sln) {
        puz = Puz;
        sln = Sln;
    }

    public boolean printersFound() {
        return printersFound;
    }

    PrintService[] services;
    final MediaSizeName[] formats = new MediaSizeName[]{
        MediaSizeName.ISO_A4,
        MediaSizeName.NA_LETTER
    };
    final int[][] formatsPt = new int[][]{
        new int[]{595, 842},
        new int[]{612, 792}
    };

    /**
     * Creates new form PrintDialog
     *
     * @param parent
     * @param modal
     */
    public PrintDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        SudokuMainWindow smw = (SudokuMainWindow) parent;
        pngReq = false;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        serviceSel = new javax.swing.JLabel();
        if(!pngReq){
            services = PrintServiceLookup.lookupPrintServices(DocFlavor.INPUT_STREAM.POSTSCRIPT,null);
        }else{
            services = new PrintService[0];
        }
        if(services.length==0){
            pngReq = true;
            services = PrintServiceLookup.lookupPrintServices(DocFlavor.INPUT_STREAM.PNG,null);
            System.err.println("Using PNG code because Windows sucks.");
        }else{
            pngReq = false;
        }
        String[] psnames = new String[services.length];
        for(int i=0;i<psnames.length;i++){
            psnames[i] = services[i].getName();
        }

        serviceBox = new javax.swing.JComboBox<>(psnames);
        if(services.length>0){
            printersFound = true;
            serviceBox.setSelectedIndex(0);
        }
        else{
            printersFound = false;
            JOptionPane.showMessageDialog(null,java.util.ResourceBundle.getBundle("de/rub/sudokucube/Bundle").getString("NO_PRINTERS"));
            dispose();
        }
        formatBox = new javax.swing.JComboBox<>();
        formatSel = new javax.swing.JLabel();
        slnCheckBox = new javax.swing.JCheckBox();
        copiesBox = new javax.swing.JTextField();
        copiesSel = new javax.swing.JLabel();
        cancelBtn = new javax.swing.JButton();
        printBtn = new javax.swing.JButton();
        userDefCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/rub/sudokucube/Bundle"); // NOI18N
        setTitle(bundle.getString("PRINT SUDOKU")); // NOI18N
        setResizable(false);

        serviceSel.setText(bundle.getString("SELECT PRINTER:")); // NOI18N

        formatBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A4 (210×297 mm / 8.3×11.7 in)", "Letter (8.5×11 in)" }));

        formatSel.setText(bundle.getString("SELECT FORMAT:")); // NOI18N

        slnCheckBox.setSelected(true);
        slnCheckBox.setText(bundle.getString("PRINT SOLUTION")); // NOI18N

        copiesBox.setText("1");

        copiesSel.setText(bundle.getString("COPIES:")); // NOI18N

        cancelBtn.setText(bundle.getString("CANCEL")); // NOI18N
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        printBtn.setText(bundle.getString("PRINT")); // NOI18N
        printBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printBtnActionPerformed(evt);
            }
        });

        userDefCheckBox.setText(bundle.getString("PRINT VALUES SET BY USER")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(serviceSel)
                            .addComponent(formatSel)
                            .addComponent(copiesSel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(formatBox, 0, 262, Short.MAX_VALUE)
                            .addComponent(serviceBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(copiesBox, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(printBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(userDefCheckBox)
                            .addComponent(slnCheckBox))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serviceBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(serviceSel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(formatBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(formatSel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(copiesBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(copiesSel))
                .addGap(18, 18, 18)
                .addComponent(slnCheckBox)
                .addGap(18, 18, 18)
                .addComponent(userDefCheckBox)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelBtn)
                    .addComponent(printBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        dispose();
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void printBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printBtnActionPerformed
        // TODO add code for paper size
        int copies;
        DocFlavor flavor;
        try {
            copies = Integer.parseInt(copiesBox.getText());
            if (copies < 1) {
                throw new Exception();
            }

            File psFile = PostScriptWorkshop.printPuzzle(
                    puz,
                    sln,
                    formats[formatBox.getSelectedIndex()],
                    slnCheckBox.isSelected(),
                    userDefCheckBox.isSelected()
            );
            File printFile;
            if (!pngReq) {
                flavor = DocFlavor.INPUT_STREAM.POSTSCRIPT;
                printFile = psFile;
            } else {
                JOptionPane.showMessageDialog(null, "[FIX ME] Windows printing on non-PostScript printers is not yet supported!");
                throw new Exception();
            }
            PrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();
            aset.add(formats[formatBox.getSelectedIndex()]);
            if (copies > 1) {
                aset.add(new Copies(copies));
            }
            DocPrintJob pj = services[serviceBox.getSelectedIndex()].createPrintJob();
            try {
                FileInputStream fis = new FileInputStream(printFile);
                Doc doc = new SimpleDoc(fis, flavor, null);
                pj.print(doc, aset);
            } catch (FileNotFoundException | PrintException e) {
                System.err.println("Damn. Something went wrong...");
            }
            dispose();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, java.util.ResourceBundle.getBundle("de/rub/sudokucube/Bundle").getString("THE NUMBER OF COPIES MUST BE A POSITIVE INTEGER!"));
        } catch (Exception e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_printBtnActionPerformed

    public void printPS(File psFile, PrintService service, MediaSizeName format, int copies) {
        DocFlavor flavor = DocFlavor.INPUT_STREAM.POSTSCRIPT;
        PrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();
        aset.add(format);
        if (copies > 1) {
            aset.add(new Copies(copies));
        }
        DocPrintJob pj = service.createPrintJob();
        try {
            FileInputStream fis = new FileInputStream(psFile);
            Doc doc = new SimpleDoc(fis, flavor, null);
            pj.print(doc, aset);
        } catch (FileNotFoundException | PrintException e) {
            System.err.println("Damn. Something went wrong...");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PrintDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                PrintDialog dialog = new PrintDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelBtn;
    private javax.swing.JTextField copiesBox;
    private javax.swing.JLabel copiesSel;
    private javax.swing.JComboBox<String> formatBox;
    private javax.swing.JLabel formatSel;
    private javax.swing.JButton printBtn;
    private javax.swing.JComboBox<String> serviceBox;
    private javax.swing.JLabel serviceSel;
    private javax.swing.JCheckBox slnCheckBox;
    private javax.swing.JCheckBox userDefCheckBox;
    // End of variables declaration//GEN-END:variables
}
